# Generated by Django 3.1.6 on 2021-02-18 17:49
# vim: set ts=8 sw=4 sts=4 et ai tw=79:
"""
django-pstore -- Python Protected Password Store (Django app)
Copyright (C) 2012,2013,2015  Walter Doekes <wdoekes>, OSSO B.V.

    This application is free software; you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

    This application is distributed in the hope that it will be useful, but
    WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this application; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
    USA.
"""

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Object',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('identifier', models.CharField(max_length=255, unique=True, validators=[django.core.validators.RegexValidator(message='Only readable ASCII is allowed: \\x20..\\x7E TAB CR LF', regex='^[\t\r\n -~]*$')])),
            ],
            options={
                'permissions': (('view_any_object', 'View any object'),),
            },
        ),
        migrations.CreateModel(
            name='PublicKey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('key', models.TextField(help_text="The user's public key; in PGP PUBLIC KEY format.", validators=[django.core.validators.RegexValidator(message='Only readable ASCII is allowed: \\x20..\\x7E TAB CR LF', regex='^[\t\r\n -~]*$')])),
                ('description', models.CharField(blank=True, help_text='Human readable info about the key, e.g. the PGP key uid (Alex B <alex@example.com>).', max_length=255)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='publickey', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ObjectPerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('can_write', models.BooleanField()),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allowed', to='pstore.object')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Nonce',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('value', models.BinaryField()),
                ('encrypted', models.BinaryField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(help_text='The property identifier/name.', max_length=255, validators=[django.core.validators.RegexValidator(message='Only readable ASCII is allowed: \\x20..\\x7E TAB CR LF', regex='^[\t\r\n -~]*$')])),
                ('type', models.PositiveSmallIntegerField(choices=[(1, 'Public (unencrypted)'), (3, 'Shared (encrypted)')], default=1, help_text='Property properties ;-)')),
                ('value', models.BinaryField(blank=True)),
                ('object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to='pstore.object')),
                ('user', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'property',
                'verbose_name_plural': 'properties',
                'unique_together': {('object', 'name', 'user')},
            },
        ),
    ]
